# -*- coding: utf-8 -*-
"""scraping.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e4yQFCpYsoTy3GO7TDav3tEp9L46dDgD
"""

import pandas as pd
import requests
from bs4 import BeautifulSoup
import re

def scrape_nfl_data(year):
    """
    Scrape NFL game data from sportsoddshistory.com,
    including all weeks and playoffs.
    """

    url = f"https://www.sportsoddshistory.com/nfl-game-season/?y={year}"
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')

    week_headers = soup.find_all('h3', string=lambda text: text and
                                 text.startswith(f'{year} Regular Season - Week'))

    games = []
    game_id = 1

    for week_header in week_headers:
        table = week_header.find_next_sibling('table', {'class': 'soh1'})
        rows = table.find_all('tr')[1:]
        current_week = week_header.text.split(" - ")[-1]

        for row in rows:
            cols = row.find_all('td')
            if len(cols) > 1:
                playoff = False

                game = {
                    'week': current_week.strip('Week').strip(),
                    'game_id': game_id,
                    'playoff': str(playoff).upper(),
                    'home_team': '',
                    'home_score': '',
                    'away_score': '',
                    'away_team': '',
                    'favorite': team_id(cols[4].text.strip() if cols[4] else ''),
                    'spread': cols[6].text.strip("WL"),
                    'over_under': cols[9].text.strip("OU")
                }

                if "@" or "N" in cols[3].text:
                    game['home_team'] = cols[4].text.strip()
                    game['away_team'] = cols[8].text.strip()

                    scores = cols[5].text.strip("WL(OT)").split('-')
                    if len(scores) == 2:
                        game['home_score'] = int(re.sub(r'[a-zA-Z]', '', scores[0]))
                        game['away_score'] = int(re.sub(r'[a-zA-Z]', '', scores[1]))

                elif "@" or "N" in cols[7].text:
                    game['home_team'] = cols[8].text.strip()
                    game['away_team'] = cols[4].text.strip()

                    scores = cols[5].text.strip("WL(OT)").split('-')
                    if len(scores) == 2:
                        game['home_score'] = int(re.sub(r'[a-zA-Z]', '', scores[1]))
                        game['away_score'] = int(re.sub(r'[a-zA-Z]', '', scores[0]))

                game['home_team'] = clean_team_name(game['home_team'])
                game['away_team'] = clean_team_name(game['away_team'])

                game['home_score'] = pd.to_numeric(game['home_score'], errors='coerce')
                game['away_score'] = pd.to_numeric(game['away_score'], errors='coerce')
                game['spread'] = pd.to_numeric(game['spread'], errors='coerce')
                game['over_under'] = pd.to_numeric(game['over_under'], errors='coerce')

                games.append(game)
                game_id += 1

    playoffs_games = soup.find_all('h3', string=lambda text: text and
                             text.startswith(f'{year} Playoffs'))

    for playoff_game in playoffs_games:
        table = playoff_game.find_next_sibling('table', {'class': 'soh1'})
        rows = table.find_all('tr')[1:]

        for row in rows:
            cols = row.find_all('td')
            if len(cols) > 1:
                playoff = True

                game = {
                    'week': cols[0].text.strip(),
                    'game_id': game_id,
                    'playoff': str(playoff).upper(),
                    'home_team': '',
                    'home_score': '',
                    'away_score': '',
                    'away_team': '',
                    'favorite': team_id(cols[5].text.strip() if cols[5] else ''),
                    'spread': cols[7].text.strip("WL"),
                    'over_under': cols[10].text.strip("OU")
                }

                if "@" or "N" in cols[4].text:
                    # Extract team names, removing extra characters:
                    game['home_team'] = re.sub(r"[\(\[].*?[\)\]]", "", cols[5].text).strip()
                    game['away_team'] = re.sub(r"[\(\[].*?[\)\]]", "", cols[9].text).strip()

                    scores = cols[6].text.strip("WL(OT)").split('-')
                    if len(scores) == 2:
                        game['home_score'] = int(re.sub(r'[a-zA-Z]', '', scores[0]))
                        game['away_score'] = int(re.sub(r'[a-zA-Z]', '', scores[1]))
                elif "@" or "N" in cols[8].text:
                    # Extract team names, removing extra characters:
                    game['home_team'] = re.sub(r"[\(\[].*?[\)\]]", "", cols[9].text).strip()
                    game['away_team'] = re.sub(r"[\(\[].*?[\)\]]", "", cols[5].text).strip()

                    scores = cols[6].text.strip("WL(OT)").split('-')
                    if len(scores) == 2:
                        game['home_score'] = int(re.sub(r'[a-zA-Z]', '', scores[1]))
                        game['away_score'] = int(re.sub(r'[a-zA-Z]', '', scores[0]))

                game['home_team'] = clean_team_name(game['home_team'])
                game['away_team'] = clean_team_name(game['away_team'])

                game['home_score'] = pd.to_numeric(game['home_score'], errors='coerce')
                game['away_score'] = pd.to_numeric(game['away_score'], errors='coerce')
                game['spread'] = pd.to_numeric(game['spread'], errors='coerce')
                game['over_under'] = pd.to_numeric(game['over_under'], errors='coerce')

                games.append(game)
                game_id += 1

    return pd.DataFrame(games)

def clean_team_name(team):
    # Create a mapping of team names to city names
    team_mapping = {
        'Arizona Cardinals': 'Arizona',
        'Atlanta Falcons': 'Atlanta',
        'Baltimore Ravens': 'Baltimore',
        'Buffalo Bills': 'Buffalo',
        'Carolina Panthers': 'Carolina',
        'Chicago Bears': 'Chicago',
        'Cincinnati Bengals': 'Cincinnati',
        'Cleveland Browns': 'Cleveland',
        'Dallas Cowboys': 'Dallas',
        'Denver Broncos': 'Denver',
        'Detroit Lions': 'Detroit',
        'Green Bay Packers': 'Green Bay',
        'Houston Texans': 'Houston',
        'Indianapolis Colts': 'Indianapolis',
        'Jacksonville Jaguars': 'Jacksonville',
        'Kansas City Chiefs': 'Kansas City',
        'Los Angeles Chargers': 'Los Angeles (C)',
        'Los Angeles Rams': 'Los Angeles (R)',
        'Las Vegas Raiders': 'Las Vegas',
        'Miami Dolphins': 'Miami',
        'Minnesota Vikings': 'Minnesota',
        'New England Patriots': 'New England',
        'New Orleans Saints': 'New Orleans',
        'New York Giants': 'New York (G)',
        'New York Jets': 'New York (J)',
        'Philadelphia Eagles': 'Philadelphia',
        'Pittsburgh Steelers': 'Pittsburgh',
        'San Francisco 49ers': 'San Francisco',
        'Seattle Seahawks': 'Seattle',
        'Tampa Bay Buccaneers': 'Tampa Bay',
        'Tennessee Titans': 'Tennessee',
        'Washington.*': 'Washington'
    }

    # Check if the team name is in the mapping
    if team in team_mapping:
        return team_mapping[team]  # If yes, return the mapped city name

    # Attempt to extract city name using regular expression
    city_match = re.match(r"(.+?)\s", team)  # Match any characters before a space

    if city_match:
        city_name = city_match.group(1)  # Extract the matched city name
        if city_name in team_mapping.values():
            return city_name  # Return city name if found in mapping values

    # If city not found in values, use the team name as is
    return team

def team_id(team_name):
    # Maps a team's name to its team ID
    team_mapping = {
        'Arizona Cardinals': 'ARI',
        'Atlanta Falcons': 'ATL',
        'Baltimore Ravens': 'BAL',
        'Buffalo Bills': 'BUF',
        'Carolina Panthers': 'CAR',
        'Chicago Bears': 'CHI',
        'Cincinnati Bengals': 'CIN',
        'Cleveland Browns': 'CLE',
        'Dallas Cowboys': 'DAL',
        'Denver Broncos': 'DEN',
        'Detroit Lions': 'DET',
        'Green Bay Packers': 'GB',
        'Houston Texans': 'HOU',
        'Indianapolis Colts': 'IND',
        'Jacksonville Jaguars': 'JAX',
        'Kansas City Chiefs': 'KC',
        'Los Angeles Chargers': 'LAC',
        'Los Angeles Rams': 'LAR',
        'Las Vegas Raiders': 'LV',
        'Miami Dolphins': 'MIA',
        'Minnesota Vikings': 'MIN',
        'New England Patriots': 'NE',
        'New Orleans Saints': 'NO',
        'New York Giants': 'NYG',
        'New York Jets': 'NYJ',
        'Philadelphia Eagles': 'PHI',
        'Pittsburgh Steelers': 'PIT',
        'San Francisco 49ers': 'SF',
        'Seattle Seahawks': 'SEA',
        'Tampa Bay Buccaneers': 'TB',
        'Tennessee Titans': 'TEN',
        'Washington.*': 'WAS'
    }

    # Check for exact full team name match first
    if team_name in team_mapping:
        return team_mapping[team_name]

    # If not found, check for city name with wildcard characters
    for city, team_id in team_mapping.items():  # Iterate through keys (team names)
        city_name = city.split()[0] # Extract the city name from the full team name
        if re.match(rf"{city_name}.*", team_name):
            return team_id

    return team_name  # Return None if no match is found

def main():
    year = 2023 # Set to season of interest
    df = scrape_nfl_data(year)
    df.to_csv(f'{year}.csv', index=False)
    print(f"Data saved to {year}.csv")

if __name__ == "__main__":
    main()